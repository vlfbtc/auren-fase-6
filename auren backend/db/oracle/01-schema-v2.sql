--------------------------------------------------------------------------------
-- LIMPEZA: derruba objetos se existirem
--------------------------------------------------------------------------------
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE alerts CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE insight_snapshots CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE transactions CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE users CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
  EXECUTE IMMEDIATE 'DROP PROCEDURE get_category_report';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
  EXECUTE IMMEDIATE 'DROP PROCEDURE log_high_value_tx';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
  EXECUTE IMMEDIATE 'DROP FUNCTION get_tx_summary_json';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
  EXECUTE IMMEDIATE 'DROP FUNCTION get_monthly_balance';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
--------------------------------------------------------------------------------
-- TABELAS
--------------------------------------------------------------------------------
CREATE TABLE users (
    id            NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    first_name    VARCHAR2(100)    NOT NULL,
    last_name     VARCHAR2(100)    NOT NULL,
    email         VARCHAR2(255)    NOT NULL,
    birth_date    DATE,
    password_hash VARCHAR2(255)    NOT NULL,
    role          VARCHAR2(50)     NOT NULL,
    CONSTRAINT pk_users PRIMARY KEY (id),
    CONSTRAINT uq_users_email UNIQUE (email)
);

CREATE TABLE transactions (
    id          NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    user_id     NUMBER           NOT NULL,
    description VARCHAR2(255)    NOT NULL,
    tx_type     VARCHAR2(7)      NOT NULL,    -- INCOME | EXPENSE (renomeado)
    amount      NUMBER(15,2)     NOT NULL,
    tx_date     DATE             NOT NULL,    -- renomeado
    category    VARCHAR2(100)    NOT NULL,
    CONSTRAINT pk_transactions PRIMARY KEY (id),
    CONSTRAINT fk_tx_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE insight_snapshots (
    id           NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    user_id      NUMBER      NOT NULL,
    payload_json CLOB        NOT NULL,
    created_at   TIMESTAMP   NOT NULL,
    tx_hash      VARCHAR2(64) NOT NULL,
    CONSTRAINT pk_insight_snapshots PRIMARY KEY (id),
    CONSTRAINT fk_snapshot_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE alerts (
    id             NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    user_id        NUMBER       NOT NULL,
    transaction_id NUMBER       NOT NULL,
    threshold      NUMBER(15,2) NOT NULL,
    created_at     TIMESTAMP    NOT NULL,
    CONSTRAINT pk_alerts PRIMARY KEY (id),
    CONSTRAINT fk_alert_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT fk_alert_tx   FOREIGN KEY (transaction_id) REFERENCES transactions(id) ON DELETE CASCADE
);

--------------------------------------------------------------------------------
-- FUNCTIONS
--------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION get_monthly_balance(
    p_user_id IN NUMBER,
    p_month   IN NUMBER,
    p_year    IN NUMBER
) RETURN NUMBER AS
    v_balance NUMBER(15,2);
BEGIN
    SELECT NVL(SUM(
             CASE 
               WHEN tx_type = 'INCOME'  THEN amount 
               WHEN tx_type = 'EXPENSE' THEN -amount 
             END
           ), 0)
      INTO v_balance
      FROM transactions
     WHERE user_id = p_user_id
       AND EXTRACT(MONTH FROM tx_date) = p_month
       AND EXTRACT(YEAR  FROM tx_date) = p_year;

    RETURN v_balance;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20001, 'Erro em get_monthly_balance: ' || SQLERRM);
END;
/

CREATE OR REPLACE FUNCTION get_tx_summary_json(
    p_user_id IN NUMBER
) RETURN CLOB AS
    v_json       CLOB;
    v_total_inc  NUMBER(15,2);
    v_total_exp  NUMBER(15,2);
    CURSOR cur_cat IS 
        SELECT category, SUM(amount) AS total
          FROM transactions
         WHERE user_id = p_user_id
         GROUP BY category;
BEGIN
    SELECT NVL(SUM(amount), 0) INTO v_total_inc 
      FROM transactions WHERE user_id = p_user_id AND tx_type = 'INCOME';
    SELECT NVL(SUM(amount), 0) INTO v_total_exp 
      FROM transactions WHERE user_id = p_user_id AND tx_type = 'EXPENSE';

    v_json := '{"userId": ' || p_user_id ||
              ', "totalIncome": '  || TO_CHAR(v_total_inc, 'FM9999990.00') ||
              ', "totalExpense": ' || TO_CHAR(v_total_exp, 'FM9999990.00') ||
              ', "categories": [';

    FOR rec IN cur_cat LOOP
       v_json := v_json || '{"category": "' || rec.category || '", "total": ' ||
                 TO_CHAR(rec.total, 'FM9999990.00') || '},';
    END LOOP;

    IF v_json LIKE '%},' THEN
       v_json := RTRIM(v_json, ',');
    END IF;

    v_json := v_json || ']}';
    RETURN v_json;
EXCEPTION
    WHEN OTHERS THEN
        RETURN '{"error":"' || REPLACE(SUBSTR(SQLERRM,1,120), '"', '''') || '"}';
END;
/

--------------------------------------------------------------------------------
-- PROCEDURES
--------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE log_high_value_tx(
    p_tx_id     IN NUMBER,
    p_threshold IN NUMBER
) AS
    v_amount NUMBER(15,2);
    v_user   NUMBER;
BEGIN
    SELECT user_id, amount
      INTO v_user, v_amount
      FROM transactions
     WHERE id = p_tx_id;

    IF v_amount > p_threshold THEN
       INSERT INTO alerts(user_id, transaction_id, threshold, created_at)
       VALUES (v_user, p_tx_id, p_threshold, SYSTIMESTAMP);
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.put_line('Transação ' || p_tx_id || ' não encontrada.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.put_line('Erro em log_high_value_tx: ' || SQLERRM);
END;
/

CREATE OR REPLACE PROCEDURE get_category_report(
    p_user_id IN  NUMBER,
    p_report  OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_report FOR
        SELECT category,
               SUM(CASE WHEN tx_type='EXPENSE' THEN amount ELSE 0 END) AS total_spent,
               SUM(CASE WHEN tx_type='INCOME' THEN amount ELSE 0 END)  AS total_received,
               COUNT(*) AS total_transactions
          FROM transactions
         WHERE user_id = p_user_id
         GROUP BY category;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20002, 'Erro em get_category_report: ' || SQLERRM);
END;
/
